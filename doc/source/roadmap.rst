#######
Roadmap
#######

A full list of milestones as well as associated tasks can be found on `lighthouse <http://byronimo.lighthouseapp.com/projects/51780-mrv/overview>`_.

******
v1.0.0
******
* Freeze the MRV API, hence method names will stay as they are
* Fix issues which came up in preview and RC releases
* Provide a template project which allows to get started on own MRV based tools easily.
 
******
v1.0.9
******
* Setup database for performance tests which allow further analysis of all values generated. This allows comparison between the maya versions and to get an overall view on the performance development of MRV. The measured values will be associated with the hardware and OS they ran on, as well as the checked-out commit.
* Improve the sphinx auto-generated documentation as it is quite unreadable, especially compared to the one generated by epydoc.
 
******
v1.1.0
******
* Dynamically generate code required to use MFnFunctions on wrapped Nodes natively with other wrapped nodes, workaround MScriptUtil and to make methods undoable in general cases. In v1.0.0, only a few methods have been prepared manually. According to some statistics, about 12% of all api methods need fixing, whereas ~500 could support automatic undo.
* Automated APIPatching - currently there are manual patches, but many classes need patches to get rid of MScriptUtil, or to support undo. These cannot be reached through Nodes though, hence the Apipatches needs to be applied similarly to wrapped methods used on objects, i.e. MClothSystem::addCloth.
 
* Strengthen MRV as a framework, and make it even easier to create own tools and maya based programs on all platforms.
 
* Provide more learning material to make the MayaAPI and MRV easier to learn, add videos and tutorials.
 
******
v1.5.0
******
 * Extend the concept of MRV to C++, by providing an autogenerated but customizable template library which allows convenient use of the MayaAPI with template wrapper functions. Using policies and traits, these can be customized to produce optimal code for the task at hand, i.e. undo support could be added or removed as you need it.
 
******
v2.0.0
******
 * Use the C++ library introduced in v1.5.0 to create a python module which replaces the current python implementation wherever feasible. This would greatly speed up MRV python, considering that wrapped Nodes would exist in C++, but can be handled using python quickly, easily and safely.
